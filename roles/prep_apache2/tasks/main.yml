---
# tasks file for prep_nginx

# - name: include os specific tasks
#   include_tasks: "{{ ansible_distribution }}.yml"

- name: Install apache2
  apt:
    name: apache2
    state: present

- name: Install libapache2-mod-php
  apt:
    name: libapache2-mod-php
    state: present
  
- name: stop and enable apache2
  systemd:
    name:    apache2
    state:   stopped
    enabled: true

- name: create some folders
  file:
    name: "{{ item.path }}"
    state: directory
    owner: "{{ item.owner }}"
    group: "{{ item.group }}"
    mode: "{{ item.mode }}"
  with_items:
    - { path: '{{ nc_datadir }}',        owner: '{{ web_user[ansible_distribution] }}', group: '{{ web_group[ansible_distribution] }}', mode: '0750' }
    - { path: '/var/www',                owner: '{{ web_user[ansible_distribution] }}', group: '{{ web_group[ansible_distribution] }}', mode: '0750' }
    - { path: '/var/www/letsencrypt',    owner: '{{ web_user[ansible_distribution] }}', group: '{{ web_group[ansible_distribution] }}', mode: '0750' }
    - { path: '/upload_tmp',             owner: '{{ web_user[ansible_distribution] }}', group: '{{ web_group[ansible_distribution] }}', mode: '0755' }

- name: install pip netaddress
  pip:
    name: netaddr
    state: latest
  when: false
  
- name: set netmask
  set_fact: 
    net_mask: "{{ ansible_default_ipv4.network }}/{{ ansible_default_ipv4.netmask }}"

- name: use ec2 public hostname if fqdn is not defined
  set_fact:
    fqdn: "{{ fqdn if ( fqdn ) else facter_ec2_metadata['public-hostname'] }}"
  when: facter_ec2_metadata is defined

- name: use ansible_fqdn if fqdn is not defined
  set_fact:
    fqdn: "{{ fqdn if ( fqdn ) else ansible_fqdn }}"
  
- name: bring "/etc/apache2/sites-available/{{ fqdn }}.conf" in place
  template:
    src: apache2.conf.j2
    dest: "/etc/apache2/sites-available/{{ fqdn }}.conf"
    owner: root
    group: root
    mode: 0644
    force: true
  notify: restart apache2

- name: Enable Apache2 site
  file:
    src: "/etc/apache2/sites-available/{{ fqdn }}.conf"
    dest: "/etc/apache2/sites-enabled/{{ fqdn }}.conf"
    state: link
  notify: restart apache2

- name: Enable Apache modules
  ansible.builtin.command: a2enmod {{ item }}
  loop:
    - rewrite
    - headers
    - env
    - dir
    - mime
    - setenvif
    - ssl
    - proxy
    - proxy_fcgi
    - http2
  notify: restart apache2

- name: Enable Nextcloud site
  ansible.builtin.command: a2ensite {{ fqdn }}.conf
  notify: restart apache2

- name: Disable default Apache virtual host
  ansible.builtin.command: a2dissite 000-default.conf
  notify: restart apache2

- name: Enable Apache modules
  ansible.builtin.command: a2enmod {{ item }}
  loop:
    - rewrite
    - headers
    - env
    - dir
    - mime
    - setenvif
    - ssl
    - proxy
    - proxy_fcgi
    - http2
  notify: restart apache2


# - name: bring /etc/nginx/nginx.conf in place
#   template:
#     src: nginx.conf.j2
#     dest: /etc/nginx/nginx.conf
#     owner: root
#     group: root
#     mode: 0644
#     force: true
#   notify: restart nginx

# - name: use ec2 public hostname if fqdn is not defined
#   set_fact:
#     fqdn: "{{ fqdn if ( fqdn ) else facter_ec2_metadata['public-hostname'] }}"
#   when: facter_ec2_metadata is defined

# - name: use ansible_fqdn if fqdn is not defined
#   set_fact:
#     fqdn: "{{ fqdn if ( fqdn ) else ansible_fqdn }}"

# - name: nginx nextcloud config
#   template:
#     src: nextcloud.conf.j2
#     dest: /etc/nginx/conf.d/nextcloud.conf
#     owner: root
#     group: root
#     mode: 0644
#   notify: restart nginx

# - name: nginx header config
#   template:
#     src: header.conf.j2
#     dest: /etc/nginx/conf.d/header.conf
#     owner: root
#     group: root
#     mode: 0644
#   notify: restart nginx

# - name: nginx config for ssl
#   template:
#     src: ssl.conf.{{ ssl_certificate_type }}.j2
#     dest: /etc/nginx/conf.d/ssl.conf
#     owner: root
#     group: root
#     mode: 0644
#   notify: restart nginx

# - name: copy some nginx config file
#   copy:
#     src: "{{ item }}"
#     dest: "/etc/nginx/conf.d/{{ item }}"
#     owner: root
#     group: root
#     mode: 0644
#     force: true
#   with_items:
#     - optimization.conf
#     - php_optimization.conf
#     - proxy.conf
#   notify: restart nginx

# - name: copy letencrypt.conf
#   copy:
#     src: letsencrypt.conf
#     dest: /etc/nginx/conf.d/letsencrypt.conf
#     owner: root
#     group: root
#     mode: 0644
#     force: true
#   notify: restart nginx

